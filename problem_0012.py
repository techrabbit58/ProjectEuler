"""This solves problem #12 of Project Euler (https://projecteuler.net).

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th
triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from mathext import triangular_numbers, divisors


def first_attempt(*, min_divisors=5):
    for t in triangular_numbers():
        if len(divisors(t)) > min_divisors:
            result = t
            break
    return result


def run_application():
    import time
    start = time.time()
    print('Solution =', first_attempt(min_divisors=500))
    print('Runtime =', time.time() - start, 'seconds')


if __name__ == '__main__':
    run_application()

# last line of code
