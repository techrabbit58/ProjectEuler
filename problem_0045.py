"""This solves problem #45 of Project Euler (https://projecteuler.net).

Triangular, pentagonal, and hexagonal
Problem 45

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	T(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	P(n)=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	H(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T(285) = P(165) = H(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

from helpers import chronometric
from mathext import hexagonal, is_pentagonal


@chronometric
def attempt():
    """Triangular numbers with odd indices are always hexagonal.
    If we test only T_odd, we do not need to test for hexagonality,
    and can leave out all T_evens. So we can speed up by a factor
    better than 2. In fact, it is sufficient to generate only hexagonals,
    because every hexagonal H(n) is equivalent to T(2n-1). Which needs
    less calculation steps.
    """
    n = 143 + 1
    while True:
        h = hexagonal(n)
        if is_pentagonal(h):
            break
        n += 1
    return h


def run_application():
    solution, elapsed = attempt()
    print('Solution =', solution)
    print('Runtime =', elapsed, 'seconds')


if __name__ == '__main__':
    run_application()

# last line of code
